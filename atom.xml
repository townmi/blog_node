<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Harry.Tang</title>
  
  
  <link href="/blog_node/atom.xml" rel="self"/>
  
  <link href="https://blog.goubaa.com/"/>
  <updated>2020-03-26T12:16:20.957Z</updated>
  <id>https://blog.goubaa.com/</id>
  
  <author>
    <name>Harry.Tang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 给用户添加ssh key</title>
    <link href="https://blog.goubaa.com/2020/03/26/Linux%E7%BB%99%E7%94%A8%E6%88%B7%E6%B7%BB%E5%8A%A0ssh-key/"/>
    <id>https://blog.goubaa.com/2020/03/26/Linux给用户添加ssh-key/</id>
    <published>2020-03-26T04:04:41.000Z</published>
    <updated>2020-03-26T12:16:20.957Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux-给用户添加ssh-key"><a href="#Linux-给用户添加ssh-key" class="headerlink" title="Linux 给用户添加ssh key"></a>Linux 给用户添加ssh key</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>第一步，用户生成ssh key, 直接明命令行输入命令ssh-keygen, 一路回车，会在用户路径下的.ssh 文件生成对应的公钥和私钥。</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>第二步，将生成的公钥复制到服务器，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp ~.ssh/id_rsa.pub user@10.211.55.4:~.ssh/authorized_keys</span><br><span class="line">//             生成的私钥</span><br></pre></td></tr></table></figure></p><p>上面是把公钥复制到服务器，并且生成对应的authorized_keys文件,如果服务器有这个文件，可以在服务器的这个文件后面，粘贴你的公钥内容</p><a id="more"></a><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>最重要的一步 <em>authorized_keys的权限要是600!!!</em>， 所以需要在服务器执行下面的命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 ~.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>通过ssh key 登录服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -l user 10.211.55.4</span><br></pre></td></tr></table></figure></p><h3 id="VSCode-支持"><a href="#VSCode-支持" class="headerlink" title="VSCode 支持"></a>VSCode 支持</h3><p>可以在客户机的.ssh 路径下的 config文件配置你的服务器登录key，下面的参考<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Host 10.211.55.4</span></span><br><span class="line">Host 10.211.55.4</span><br><span class="line">IdentityFile ~/.ssh/你的私钥</span><br><span class="line">User user</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Linux-给用户添加ssh-key&quot;&gt;&lt;a href=&quot;#Linux-给用户添加ssh-key&quot; class=&quot;headerlink&quot; title=&quot;Linux 给用户添加ssh key&quot;&gt;&lt;/a&gt;Linux 给用户添加ssh key&lt;/h3&gt;&lt;h4 id=&quot;第一步&quot;&gt;&lt;a href=&quot;#第一步&quot; class=&quot;headerlink&quot; title=&quot;第一步&quot;&gt;&lt;/a&gt;第一步&lt;/h4&gt;&lt;p&gt;第一步，用户生成ssh key, 直接明命令行输入命令ssh-keygen, 一路回车，会在用户路径下的.ssh 文件生成对应的公钥和私钥。&lt;/p&gt;
&lt;h4 id=&quot;第二步&quot;&gt;&lt;a href=&quot;#第二步&quot; class=&quot;headerlink&quot; title=&quot;第二步&quot;&gt;&lt;/a&gt;第二步&lt;/h4&gt;&lt;p&gt;第二步，将生成的公钥复制到服务器，&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scp ~.ssh/id_rsa.pub user@10.211.55.4:~.ssh/authorized_keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//             生成的私钥&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面是把公钥复制到服务器，并且生成对应的authorized_keys文件,如果服务器有这个文件，可以在服务器的这个文件后面，粘贴你的公钥内容&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.goubaa.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://blog.goubaa.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>git 常用命令</title>
    <link href="https://blog.goubaa.com/2019/02/01/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://blog.goubaa.com/2019/02/01/git-常用命令/</id>
    <published>2019-02-01T05:20:32.000Z</published>
    <updated>2020-03-26T11:52:13.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="拉取项目"><a href="#拉取项目" class="headerlink" title="拉取项目"></a>拉取项目</h3><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><blockquote><p><code>git clone args1 args2</code></p></blockquote><ul><li><code>args1</code> 代表项目的地址，可以是https模式: <code>https://github.com/facebook/react.git</code> 或者是git模式 <a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:facebook/react.git` </li><li><code>args2</code> 如果没有这个参数那么拉下来的项目名称就是<code>args1</code>参数里的默认名称，上面的案例的就是<code>react</code>, 如果有参数, 项目的名称就是<code>args2</code><a id="more"></a><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3></li></ul><h4 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h4><blockquote><p><code>git fetch args1</code></p></blockquote><p>fetch 命令紧紧把远端项目的最新代码更新到本地，如果没有<code>args1</code> 参数默认就是 <code>origin</code> 如果有就是<code>fetch arsg1</code> 对应的远端最新代码</p><h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h4><p>pull 在 fetch 基础上会把最新拉下来的远端代码merge到本地代码中具体可以看下面的细节</p><blockquote><p><code>git pull --tags args1 args2</code></p></blockquote><ul><li><code>args1</code> 代表远端项目地址 如果没有就是默认的 <code>origin</code></li><li><code>args2</code> 代表需要合并的本地分支<blockquote><p><code>git pull</code> 这是常用的, <code>args1</code>和<code>args2</code>都是默认的, 如果当前本地分支是<code>develop</code>, 执行这个命令后会拉最新<code>origin</code>远端代码，再把最新的远端develop分支代码合并到本地的develop分支. 如果有冲突，在控制台会输出具体哪些文件冲突，如果没有冲突就会打印<code>Already up to date.</code></p></blockquote></li></ul><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h4><blockquote><p><code>git remote -v</code> 查看当前远端仓库列表</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">charlnCI        git@github.com:charlnCI/splayerx.git (fetch)</span><br><span class="line">charlnCI        git@github.com:charlnCI/splayerx.git (push)</span><br><span class="line">chiflix git@github.com:chiflix/splayerx.git (fetch)</span><br><span class="line">chiflix git@github.com:chiflix/splayerx.git (push)</span><br><span class="line">origin  git@github.com:townmi/splayerx.git (fetch)</span><br><span class="line">origin  git@github.com:townmi/splayerx.git (push)</span><br></pre></td></tr></table></figure><blockquote><p><code>git remote show args1</code> 查看某个远端仓库的明细，这里就是<code>args1</code>对应的远端仓库</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* remote charlnCI</span><br><span class="line">  Fetch URL: git@github.com:charlnCI/splayerx.git</span><br><span class="line">  Push  URL: git@github.com:charlnCI/splayerx.git</span><br><span class="line">  HEAD branch: develop</span><br><span class="line">  Remote branches:</span><br><span class="line">    dai              new (next fetch will store <span class="keyword">in</span> remotes/charlnCI)</span><br><span class="line">    develop          new (next fetch will store <span class="keyword">in</span> remotes/charlnCI)</span><br><span class="line">    fast-reading-mkv new (next fetch will store <span class="keyword">in</span> remotes/charlnCI)</span><br><span class="line">    master           new (next fetch will store <span class="keyword">in</span> remotes/charlnCI)</span><br><span class="line">    tomasen          new (next fetch will store <span class="keyword">in</span> remotes/charlnCI)</span><br><span class="line">  Local ref configured <span class="keyword">for</span> <span class="string">'git push'</span>:</span><br><span class="line">    develop pushes to develop (fast-forwardable)</span><br></pre></td></tr></table></figure><blockquote><p><code>git remote rename args1 args2</code> 将<code>args1</code>名称改为<code>args2</code></p></blockquote><blockquote><p><code>git remote rm args1</code> 将<code>args1</code>远端仓库从git远端源中删除掉</p></blockquote><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><blockquote><p>要查看哪些文件处于什么状态，可以用 <code>git status</code> 命令。 如果在克隆仓库后立即使用此命令，会看到类似这样的输出</p></blockquote><p><img src="/uploads/20190202/2.png" alt="git status"><br>可以看到当前分支各种状态，版本是否比远端旧，本地是否新增、删除或者修改了某些文件，等等。下面的图可以解释各类文件状态<br><img src="/uploads/20190202/1.png" alt="status"></p><blockquote><p><code>git status -s</code> s 标记，仅现实文件状态简略的信息。</p></blockquote><h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><blockquote><p><code>git diff</code></p></blockquote><h4 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h4><blockquote><p><code>git show</code><br></p></blockquote><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><blockquote><p><code>git add</code></p></blockquote><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><blockquote><p><code>git commit</code></p></blockquote><h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><h4 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h4><h4 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h4><h3 id="更新-1"><a href="#更新-1" class="headerlink" title="更新"></a>更新</h3><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;拉取项目&quot;&gt;&lt;a href=&quot;#拉取项目&quot; class=&quot;headerlink&quot; title=&quot;拉取项目&quot;&gt;&lt;/a&gt;拉取项目&lt;/h3&gt;&lt;h4 id=&quot;git-clone&quot;&gt;&lt;a href=&quot;#git-clone&quot; class=&quot;headerlink&quot; title=&quot;git clone&quot;&gt;&lt;/a&gt;git clone&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git clone args1 args2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;args1&lt;/code&gt; 代表项目的地址，可以是https模式: &lt;code&gt;https://github.com/facebook/react.git&lt;/code&gt; 或者是git模式 &lt;a href=&quot;mailto:`git@github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;`git@github.com&lt;/a&gt;:facebook/react.git` &lt;/li&gt;
&lt;li&gt;&lt;code&gt;args2&lt;/code&gt; 如果没有这个参数那么拉下来的项目名称就是&lt;code&gt;args1&lt;/code&gt;参数里的默认名称，上面的案例的就是&lt;code&gt;react&lt;/code&gt;, 如果有参数, 项目的名称就是&lt;code&gt;args2&lt;/code&gt;
    
    </summary>
    
      <category term="工具" scheme="https://blog.goubaa.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="https://blog.goubaa.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 单元测试</title>
    <link href="https://blog.goubaa.com/2019/01/19/TypeScript-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.goubaa.com/2019/01/19/TypeScript-单元测试/</id>
    <published>2019-01-19T11:37:38.000Z</published>
    <updated>2020-03-26T11:52:13.783Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我们将研究如何使用TypeScript进行单元测试以及流行的框架：Mocha / Chai，Jasmine或Jest。 我们已经知道目前流行的框架，并希望在TypeScript中编写单元测试！ 我们将介绍在TypeScript中支持单元测试所需的更改。 如果没有，可以参考每个库的文档。 在TypeScript中编写测试用例与在JavaScript中编写测试用例非常相似。 最重要的部分是进行设置，以便使用此库可以执行用TypeScript编写的测试用例。<br><a id="more"></a><br>源代码可从<a href="https://github.com/chiragrupani/TSUnitTestsSetup" target="_blank" rel="noopener">https://github.com/chiragrupani/TSUnitTestsSetup</a>获得。 它包含每个框架的设置和示例。</p><p>设置非常简单，我们将安装相应的测试框架及其类型。 我们将使用ts-node（用于Mocha），jasmine-ts（用于jasmine）和ts-jest（用于Jest）来添加TypeScript支持。 我们将使用nyc进行代码覆盖。</p><p>我们将遵循以下约定：将源JS / TS文件放在src文件夹中并测试tests文件夹中的typescript文件。</p><p>基本上，它是为TypeScript，测试框架（例如Jasmine / Mocha / Jest）安装npm包，并指定执行测试用例所需的测试脚本，如进一步说明的那样。 除了选定的单元测试框架包外，还需要安装相应的类型。 为了在Node中执行TS测试，我们需要在package.json中指定用于测试的脚本。 package.json文件位于项目的根目录下，并在执行npm init时生成。</p><p>要调试TypeScript测试，需要在launch.json中的配置下添加故事下面“VS Code debug”部分下指定的json，可以通过转到Debug Menu然后在VS Code中添加配置来创建。 下面是每个框架的npm命令，测试脚本和VS代码调试配方：</p><h3 id="Mocha-Chai"><a href="#Mocha-Chai" class="headerlink" title="Mocha/Chai"></a>Mocha/Chai</h3><h4 id="NPM-Install-Command"><a href="#NPM-Install-Command" class="headerlink" title="NPM Install Command"></a>NPM Install Command</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D chai mocha nyc ts-node typescript</span><br><span class="line">npm i -D @types/chai @types/mocha</span><br></pre></td></tr></table></figure><h4 id="Test-Script"><a href="#Test-Script" class="headerlink" title="Test Script"></a>Test Script</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "test": "mocha -r ts-node/register tests/**/*.test.ts",</span><br><span class="line">    "testWithCoverage": "nyc -r lcov -e .ts -x \"*.test.ts\" mocha -r  ts-node/register tests/**/*.test.ts &amp;&amp; nyc report"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="VS-Code-Debug"><a href="#VS-Code-Debug" class="headerlink" title="VS Code Debug"></a>VS Code Debug</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">      <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Mocha Current File"</span>,</span><br><span class="line">      <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/node_modules/mocha/bin/_mocha"</span>,</span><br><span class="line">      <span class="attr">"args"</span>: [</span><br><span class="line">        <span class="string">"--no-timeouts"</span>,</span><br><span class="line">        <span class="string">"--colors"</span>,</span><br><span class="line">        <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">        <span class="string">"--require"</span>,</span><br><span class="line">        <span class="string">"ts-node/register"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"console"</span>: <span class="string">"integratedTerminal"</span>,</span><br><span class="line">      <span class="attr">"sourceMaps"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"internalConsoleOptions"</span>: <span class="string">"neverOpen"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Test"><a href="#Sample-Test" class="headerlink" title="Sample Test"></a>Sample Test</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'calculate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = Calculator.Sum(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">    expect(result).equal(<span class="number">7</span>);</span><br><span class="line">  &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Jasmine"><a href="#Jasmine" class="headerlink" title="Jasmine"></a>Jasmine</h3><h4 id="NPM-Install-Command-1"><a href="#NPM-Install-Command-1" class="headerlink" title="NPM Install Command"></a>NPM Install Command</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D jasmine jasmine-ts nyc ts-node typescript</span><br><span class="line">npm i -D @types/jasmine</span><br></pre></td></tr></table></figure><h4 id="Test-Script-1"><a href="#Test-Script-1" class="headerlink" title="Test Script"></a>Test Script</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "jasmine-ts --config=jasmine.json",</span><br><span class="line">  "testWithCoverage": "nyc -r lcov -e .ts -x \"*.test.ts\" jasmine-ts --config=jasmine.json &amp;&amp; nyc report"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="The-jasmine-json-at-root-directory-specifies-path-for-tests-like-below"><a href="#The-jasmine-json-at-root-directory-specifies-path-for-tests-like-below" class="headerlink" title="The jasmine.json at root directory specifies path for tests like below:"></a>The <code>jasmine.json</code> at root directory specifies path for tests like below:</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"spec_dir"</span>: <span class="string">"tests"</span>,</span><br><span class="line">   <span class="attr">"spec_files"</span>: [<span class="string">"**/*[tT]est.ts"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="VS-Code-Debug-1"><a href="#VS-Code-Debug-1" class="headerlink" title="VS Code Debug"></a>VS Code Debug</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">  <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Jasmine Current File"</span>,</span><br><span class="line">  <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/node_modules/jasmine-ts/lib/index"</span>,</span><br><span class="line">  <span class="attr">"args"</span>: [<span class="string">"$&#123;file&#125;"</span>],</span><br><span class="line">  <span class="attr">"console"</span>: <span class="string">"integratedTerminal"</span>,</span><br><span class="line">  <span class="attr">"internalConsoleOptions"</span>: <span class="string">"neverOpen"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Test-1"><a href="#Sample-Test-1" class="headerlink" title="Sample Test"></a>Sample Test</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'calculate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = Calculator.Sum(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">    expect(result).toBe(<span class="number">7</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h3><h4 id="NPM-Install-Command-2"><a href="#NPM-Install-Command-2" class="headerlink" title="NPM Install Command"></a>NPM Install Command</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D jest ts-jest typescript</span><br><span class="line">npm i -D @types/jest</span><br></pre></td></tr></table></figure><h4 id="Test-Script-2"><a href="#Test-Script-2" class="headerlink" title="Test Script"></a>Test Script</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "jest",</span><br><span class="line">  "testWithCoverage": "jest --coverage"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="VS-Code-Debug-2"><a href="#VS-Code-Debug-2" class="headerlink" title="VS Code Debug"></a>VS Code Debug</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">      <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Jest Current File"</span>,</span><br><span class="line">      <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/node_modules/.bin/jest"</span>,</span><br><span class="line">      <span class="attr">"args"</span>: [<span class="string">"$&#123;relativeFile&#125;"</span>],</span><br><span class="line">      <span class="attr">"console"</span>: <span class="string">"integratedTerminal"</span>,</span><br><span class="line">      <span class="attr">"internalConsoleOptions"</span>: <span class="string">"neverOpen"</span>,</span><br><span class="line">      <span class="attr">"windows"</span>: &#123;</span><br><span class="line">        <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/node_modules/jest/bin/jest"</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：这里的测试脚本只是“jest””。 要使用TypeScript，我们在package.json所在位置的新config jest.config.js文件中定义transform</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  transform: &#123;<span class="string">'^.+\\.ts?$'</span>: <span class="string">'ts-jest'</span>&#125;,</span><br><span class="line">  testEnvironment: <span class="string">'node'</span>,</span><br><span class="line">  testRegex: <span class="string">'/tests/.*\\.(test|spec)?\\.(ts|tsx)$'</span>,</span><br><span class="line">  moduleFileExtensions: [<span class="string">'ts'</span>, <span class="string">'tsx'</span>, <span class="string">'js'</span>, <span class="string">'jsx'</span>, <span class="string">'json'</span>, <span class="string">'node'</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关键是testRegex，我们在test文件夹下匹配以test / spec结尾的ts / tsx文件。 它将由ts-jest处理。 我们在’testEnvironment’中使用’node’，因为我们正在Node上执行测试（这使得它更快），否则我们将使用默认的’jsdom’值。</p><h4 id="Sample-Test-2"><a href="#Sample-Test-2" class="headerlink" title="Sample Test"></a>Sample Test</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'calculate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = Calculator.Sum(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">    expect(result).toBe(<span class="number">7</span>);   </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是设置所需的全部，可以通过执行命令来运行测试：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm t</span><br></pre></td></tr></table></figure></p><p>npm t是npm run test和获取覆盖结果的快捷方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run testWithCoverage</span><br></pre></td></tr></table></figure></p><blockquote><p>添加测试用例</p></blockquote><p>在添加单元测试用例之前，首先让我们了解Suite和Specs。 Spec是每个单独的测试用例，包含一个或多个断言。 测试用例在其期望为真时通过。 通常使用itfunctions定义（基于测试框架）。 它包含两个参数 - 一个是测试用例的名称，另一个是包含断言的函数。 套件是一组相关的规范，通常使用类似于它的描述来定义，并包含许多功能。 上面的示例测试用例显示了如何为每个框架定义它。</p><p>在执行一些代码（测试初始化）之前和之后（清理）每个测试用例，模拟外部对象/服务等依赖于框架，框架的文档将包含所需的信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，我们将研究如何使用TypeScript进行单元测试以及流行的框架：Mocha / Chai，Jasmine或Jest。 我们已经知道目前流行的框架，并希望在TypeScript中编写单元测试！ 我们将介绍在TypeScript中支持单元测试所需的更改。 如果没有，可以参考每个库的文档。 在TypeScript中编写测试用例与在JavaScript中编写测试用例非常相似。 最重要的部分是进行设置，以便使用此库可以执行用TypeScript编写的测试用例。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://blog.goubaa.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="TypeScript" scheme="https://blog.goubaa.com/tags/TypeScript/"/>
    
      <category term="Mocha" scheme="https://blog.goubaa.com/tags/Mocha/"/>
    
      <category term="Jest" scheme="https://blog.goubaa.com/tags/Jest/"/>
    
      <category term="Jasmine" scheme="https://blog.goubaa.com/tags/Jasmine/"/>
    
  </entry>
  
  <entry>
    <title>Electron 入门</title>
    <link href="https://blog.goubaa.com/2019/01/17/Electron-%E5%85%A5%E9%97%A8/"/>
    <id>https://blog.goubaa.com/2019/01/17/Electron-入门/</id>
    <published>2019-01-17T07:10:19.000Z</published>
    <updated>2020-03-26T11:52:13.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Electron"><a href="#什么是Electron" class="headerlink" title="什么是Electron"></a>什么是Electron</h3><p><a href="https://electronjs.org/" target="_blank" rel="noopener">Electron</a>是可以使用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。 <a href="https://www.chromium.org/" target="_blank" rel="noopener">Electron</a>通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。</p><a id="more"></a><h3 id="第一个Election应用"><a href="#第一个Election应用" class="headerlink" title="第一个Election应用"></a>第一个Election应用</h3><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">└── render.js</span><br></pre></td></tr></table></figure><h4 id="目录代码说明"><a href="#目录代码说明" class="headerlink" title="目录代码说明"></a>目录代码说明</h4><ul><li><p><code>package.json</code> 这个就是项目的配置文件。</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"electron-downloader"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"a electron app for download p2p files"</span>,</span><br><span class="line">    <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"start"</span>: <span class="string">"electron ."</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"repository"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"git+https://github.com/townmi/electron-downloader.git"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"keywords"</span>: [</span><br><span class="line">        <span class="string">"p2p"</span>,</span><br><span class="line">        <span class="string">"electron"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"harry.tang"</span>,</span><br><span class="line">    <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">    <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"https://github.com/townmi/electron-downloader/issues"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"homepage"</span>: <span class="string">"https://github.com/townmi/electron-downloader#readme"</span>,</span><br><span class="line">    <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">        <span class="attr">"electron"</span>: <span class="string">"^4.0.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>main.js</code> 是定义在<code>package.json</code> <code>main</code>字段，electron 执行的时候会查找该字段对于的启动文件，如果没有定义，就会查找一级目录下的<code>index.js</code>文件。总之，这个文件就是项目的启动文件。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建全局主窗口变量</span></span><br><span class="line"><span class="keyword">let</span> mainWindow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建主窗口</span></span><br><span class="line">    mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        width: <span class="number">800</span>,</span><br><span class="line">        height: <span class="number">600</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 给主窗口加载我们的页面</span></span><br><span class="line">    mainWindow.loadFile(<span class="string">'index.html'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当主窗口被关闭掉，我们需要释放对其的引用</span></span><br><span class="line">    mainWindow.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">        mainWindow = <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当electron应用初始化完成，可以创建窗口视区</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow);</span><br></pre></td></tr></table></figure></li><li><p><code>index.html</code> 在应用里面会开启窗口<code>win = new BrowserWindow({ width: 800, height: 600 })</code> 窗口都会加载一个页面，通常情况下加载的就是<code>index.html</code></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Electron Downloader<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Electron Downloader Manager<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 可以引用render.js</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">require</span>(<span class="string">'./render.js'</span>)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>render.js</code> 这个脚本，都一般是窗口页面依赖的脚本</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的 Node.js APIs 在这里都可以被调用</span></span><br></pre></td></tr></table></figure></li><li><p><code>npm run start</code> 启动electron应用，会得到下面的视图<br><img src="/uploads/20190117/1.png" alt="Electron Downloader"></p></li></ul><p>### </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Electron&quot;&gt;&lt;a href=&quot;#什么是Electron&quot; class=&quot;headerlink&quot; title=&quot;什么是Electron&quot;&gt;&lt;/a&gt;什么是Electron&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://electronjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Electron&lt;/a&gt;是可以使用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。 &lt;a href=&quot;https://www.chromium.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Electron&lt;/a&gt;通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://blog.goubaa.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Electron" scheme="https://blog.goubaa.com/tags/Electron/"/>
    
      <category term="JS" scheme="https://blog.goubaa.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Android反编译</title>
    <link href="https://blog.goubaa.com/2019/01/09/Android%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <id>https://blog.goubaa.com/2019/01/09/Android反编译/</id>
    <published>2019-01-09T09:31:56.000Z</published>
    <updated>2020-03-26T11:52:13.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需要准备的工具"><a href="#需要准备的工具" class="headerlink" title="需要准备的工具"></a>需要准备的工具</h3><ul><li><a href="https://www.oracle.com/technetwork/cn/java/javase/downloads/jdk8-downloads-2133151-zhs.html" target="_blank" rel="noopener">JDK</a></li><li><a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="noopener">apktool</a></li><li><a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="noopener">dex2jar</a></li><li><a href="http://jd.benow.ca/" target="_blank" rel="noopener">jd-gui</a></li></ul><a id="more"></a><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="安装java环境"><a href="#安装java环境" class="headerlink" title="安装java环境"></a>安装<code>java</code>环境</h4><p> 正确安装好java环境后，可以使用<code>java -version</code> 查看环境配置是否正常</p><p><img src="/uploads/20190109/1.png" alt="java -version"></p><h4 id="设置apktool脚本"><a href="#设置apktool脚本" class="headerlink" title="设置apktool脚本"></a>设置<code>apktool</code>脚本</h4><p> <a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="noopener">参考</a> 下面是mac os 配置的案例</p><ul><li>下载<a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/osx/apktool" target="_blank" rel="noopener">脚本</a> (另存为apktool)</li><li>下载 <a href="https://bitbucket.org/iBotPeaches/apktool/downloads/" target="_blank" rel="noopener">apktool-2</a> 将下载的jar包重命名为<code>apktool.jar</code></li><li>将解压后的文件<code>apktool.jar &amp; apktool</code>复制到/usr/local/bin目录下 (需要root权限)</li><li>解决权限问题<code>chmod 777 apktool apktool.jar</code></li></ul><h4 id="设置dex2jar-sh脚本"><a href="#设置dex2jar-sh脚本" class="headerlink" title="设置dex2jar.sh脚本"></a>设置<code>dex2jar.sh</code>脚本</h4><ul><li>将下载好的dex2jar压缩包解压，将<code>d2j-dex2jar.sh</code>重命名为<code>dex2jar.sh</code></li><li>将解压后的文件夹<code>dex2jar/</code>复制到/usr/local/bin目录下 (需要root权限)</li><li>解决权限问题<code>chmod -R 777 dex2jar/</code></li><li>设置环境变量  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 1. 打开.bash_profile文件，并添加如下配置：</span><br><span class="line">export PATH=$PATH:/usr/local/bin/dex2jar</span><br><span class="line"># 2. 执行命令：source ~/.bash_profile，让配置立即生效</span><br></pre></td></tr></table></figure></li></ul><h3 id="Android逆向流程"><a href="#Android逆向流程" class="headerlink" title="Android逆向流程"></a>Android逆向流程</h3><h4 id="使用apktool反编译apk安装包"><a href="#使用apktool反编译apk安装包" class="headerlink" title="使用apktool反编译apk安装包"></a>使用<code>apktool</code>反编译apk安装包</h4><ul><li><p><code>apktool d xxx.apk</code> 反编译<code>xxx.apk</code>获得<code>xxx</code>目录如下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── AndroidManifest.xml   </span><br><span class="line">├── apktool.yml</span><br><span class="line">├── assets</span><br><span class="line">├── lib</span><br><span class="line">├── original</span><br><span class="line">├── res</span><br><span class="line">├── smali</span><br><span class="line">├── smali_classes2</span><br><span class="line">└── unknown</span><br></pre></td></tr></table></figure></li><li><p><code>apktool b xxx</code> 重新打包<code>xxx</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── AndroidManifest.xml</span><br><span class="line">├── apktool.yml</span><br><span class="line">├── assets</span><br><span class="line">├── build   // 重新编译资源和源代码</span><br><span class="line">├── dist    // 重新编译后的apk文件</span><br><span class="line">├── lib</span><br><span class="line">├── original</span><br><span class="line">├── res</span><br><span class="line">├── smali</span><br><span class="line">├── smali_classes2</span><br><span class="line">└── unknown</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用dex2jar-sh将dex反编译成jar"><a href="#使用dex2jar-sh将dex反编译成jar" class="headerlink" title="使用dex2jar.sh将dex反编译成jar"></a>使用<code>dex2jar.sh</code>将dex反编译成jar</h4><p>apktool重新编译我们获得<code>build</code> 目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── apk</span><br><span class="line">    ├── AndroidManifest.xml</span><br><span class="line">    ├── classes.dex</span><br><span class="line">    ├── classes2.dex</span><br><span class="line">    ├── lib</span><br><span class="line">    ├── res</span><br><span class="line">    └── resources.arsc</span><br></pre></td></tr></table></figure></p><p>两个dex文件是源代码的核心文件, 我们使用<code>dex2jar.sh classes.dex</code>可以获得<code>classes-dex2jar.jar</code>文件(打包在jar包里)</p><h4 id="使用JD-GUI软件查看jar包内容"><a href="#使用JD-GUI软件查看jar包内容" class="headerlink" title="使用JD-GUI软件查看jar包内容"></a>使用<code>JD-GUI</code>软件查看jar包内容</h4><p>使用<code>jd-gui</code>这个软件来查看<code>classes-dex2jar.jar</code><br><img src="/uploads/20190109/2.png" alt="classes-dex2jar.jar"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需要准备的工具&quot;&gt;&lt;a href=&quot;#需要准备的工具&quot; class=&quot;headerlink&quot; title=&quot;需要准备的工具&quot;&gt;&lt;/a&gt;需要准备的工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/cn/java/javase/downloads/jdk8-downloads-2133151-zhs.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ibotpeaches.github.io/Apktool/install/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;apktool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pxb1988/dex2jar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dex2jar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jd.benow.ca/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jd-gui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="安卓" scheme="https://blog.goubaa.com/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="Java" scheme="https://blog.goubaa.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CSS基础知识</title>
    <link href="https://blog.goubaa.com/2019/01/08/CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://blog.goubaa.com/2019/01/08/CSS基础知识/</id>
    <published>2019-01-08T11:58:27.000Z</published>
    <updated>2020-03-26T11:52:13.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><blockquote><p>基本选择器</p></blockquote><table><thead><tr><th>选择器类型</th><th style="text-align:right">优先级</th></tr></thead><tbody><tr><td>*通配符</td><td style="text-align:right">0</td></tr><tr><td>元素</td><td style="text-align:right">1</td></tr><tr><td>class</td><td style="text-align:right">10</td></tr><tr><td>ID</td><td style="text-align:right">100</td></tr><tr><td><em>行内</em></td><td style="text-align:right">除了下面的，它的最高、尽量少用(不利于样式维护)</td></tr><tr><td><em>!important</em></td><td style="text-align:right">优先级最高，无视各种组合、慎用</td></tr></tbody></table><a id="more"></a><blockquote><p>多元素组合</p></blockquote><table><thead><tr><th>选择器类型</th><th style="text-align:right">描述</th><th style="text-align:center">优先级</th></tr></thead><tbody><tr><td>E, F</td><td style="text-align:right">元素多选</td><td style="text-align:center">1</td></tr><tr><td>E F</td><td style="text-align:right">后代元素</td><td style="text-align:center">11</td></tr><tr><td>E &gt; F</td><td style="text-align:right">子元素</td><td style="text-align:center">11</td></tr><tr><td>E + F</td><td style="text-align:right">相邻元素</td><td style="text-align:center">11</td></tr></tbody></table><blockquote><p>属性选择器</p></blockquote><table><thead><tr><th>选择器类型</th><th style="text-align:right">描述</th><th style="text-align:center">优先级</th></tr></thead><tbody><tr><td>E[att]</td><td style="text-align:right">匹配带有该属性的元素</td><td style="text-align:center">11</td></tr><tr><td>E[att=val]</td><td style="text-align:right">属性等于值的元素</td><td style="text-align:center">11</td></tr><tr><td>E[att~=val]</td><td style="text-align:right">属性包含值的元素  <br> (这个值需要和其他值空格隔开)</td><td style="text-align:center">11</td></tr><tr><td><img src="/uploads/20190108/1.png" alt="E[att]"></td><td style="text-align:right">属性以值开头的元素 <br> (这个值不可以和其他值用空格隔开)</td><td style="text-align:center">11</td></tr><tr><td>E[att^=val]</td><td style="text-align:right">属性以值开头的元素</td><td style="text-align:center">11</td></tr><tr><td>E[att$=val]</td><td style="text-align:right">属性以值结尾的元素</td><td style="text-align:center">11</td></tr><tr><td>E[att*=val]</td><td style="text-align:right">属性包含值的元素</td><td style="text-align:center">11</td></tr></tbody></table><blockquote><p>伪类</p></blockquote><table><thead><tr><th>选择器类型</th><th style="text-align:right">描述</th><th style="text-align:center">优先级</th></tr></thead><tbody><tr><td>E:focus</td><td style="text-align:right">获取焦点的元素</td><td style="text-align:center">11</td></tr><tr><td>E:active</td><td style="text-align:right">点击状态的元素</td><td style="text-align:center">11</td></tr><tr><td>E:nth-child(n)</td><td style="text-align:right">父元素的第n个子元素(结构性伪类)</td><td style="text-align:center">11</td></tr></tbody></table><blockquote><p>伪类元素</p></blockquote><table><thead><tr><th>选择器类型</th><th style="text-align:right">描述</th><th style="text-align:center">优先级</th></tr></thead><tbody><tr><td>E:before</td><td style="text-align:right"></td><td style="text-align:center">11</td></tr><tr><td>E:after</td><td style="text-align:right"></td><td style="text-align:center">11</td></tr></tbody></table><h3 id="属性继承"><a href="#属性继承" class="headerlink" title="属性继承"></a>属性继承</h3><blockquote><p>可继承的属性: font color</p></blockquote><blockquote><p>不可继承的样式: width, height, border, padding, margin</p></blockquote><h3 id="display属性说明"><a href="#display属性说明" class="headerlink" title="display属性说明"></a>display属性说明</h3><table><thead><tr><th>对应的值</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td>inline</td><td style="text-align:right">内联元素特性</td></tr><tr><td>none</td><td style="text-align:right">隐藏</td></tr><tr><td>inline-block</td><td style="text-align:right">内联显示，内容块元素显示</td></tr><tr><td>block</td><td style="text-align:right">块元素特性</td></tr><tr><td>flex</td><td style="text-align:right">弹性布局（新语法）<br> 横着排还是竖着排，只取决 flex-direction 的值  <br> float、clear、text-align、vertical-align 失效</td></tr><tr><td>-webkit-box</td><td style="text-align:right">弹性布局（老语法 ）<br> 子元素是block 的，竖着排，子元素是 inline、inline-block，横着排 <br> float、clear、text-align、vertical-align 仍起作用</td></tr><tr><td>table</td><td style="text-align:right">表格特性</td></tr><tr><td>list-item</td><td style="text-align:right">列表特性</td></tr></tbody></table><h3 id="position属性说明"><a href="#position属性说明" class="headerlink" title="position属性说明"></a>position属性说明</h3><table><thead><tr><th>对应的值</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td>static（默认）</td><td style="text-align:right">按照正常文档流进行排列</td></tr><tr><td>relative（相对定位）</td><td style="text-align:right">不脱离文档流，参考自身静态位置通过定位</td></tr><tr><td>absolute(绝对定位)</td><td style="text-align:right">参考距其最近一个不为static的父级元素通过定位</td></tr><tr><td>fixed(固定定位)</td><td style="text-align:right">所固定的参照对像是可视窗口</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/a&gt;选择器&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;基本选择器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选择器类型&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;优先级&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*通配符&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;元素&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ID&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;行内&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;除了下面的，它的最高、尽量少用(不利于样式维护)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;!important&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;优先级最高，无视各种组合、慎用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="前端" scheme="https://blog.goubaa.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://blog.goubaa.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>WebPack 构建PWA</title>
    <link href="https://blog.goubaa.com/2018/03/28/WebPack%20%E6%9E%84%E5%BB%BAPWA/"/>
    <id>https://blog.goubaa.com/2018/03/28/WebPack 构建PWA/</id>
    <published>2018-03-28T04:37:29.000Z</published>
    <updated>2020-03-26T11:52:13.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WebPack-构建PWA"><a href="#WebPack-构建PWA" class="headerlink" title="WebPack 构建PWA"></a>WebPack 构建PWA</h3><p>前面我们了解到如何通过 Service Worker 服务缓存资源, 如今WEB前端许多项目都使用了webpack构建工具, 今天我们不来将如何使用webpack, 仅仅简单介绍下 如何通过webpack 来构建一个 PWA 应用。</p><p>在原有webpack 环境下，我们需要引入一个扩展包 <a href="https://github.com/oliviertassinari/serviceworker-webpack-plugin" target="_blank" rel="noopener">serviceworker-webpack-plugin</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D serviceworker-webpack-plugin</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>把扩展包添加到webpack配置文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ServiceWorkerWebpackPlugin <span class="keyword">from</span> <span class="string">'serviceworker-webpack-plugin'</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ServiceWorkerWebpackPlugin(&#123;</span><br><span class="line">      entry: path.join(__dirname, <span class="string">'src/sw.js'</span>),</span><br><span class="line">      publicPath: <span class="string">'/xxx/'</span>,</span><br><span class="line">      filename: <span class="string">`sw-personal.js`</span> <span class="comment">// 在network里面被访问的sw.js</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure></p><p>然后需要在js主线程注册Server Worker<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> runtime <span class="keyword">from</span> <span class="string">'serviceworker-webpack-plugin/lib/runtime'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="keyword">const</span> registration = runtime.register();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们的简单PWA应用基本完成，这里被注册到AppCache里面的文件都是通过webpack打包出来的，如果我们需要加入静态的其他资源，我们可以手动添加到<code>&#39;src/sw.js&#39;</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  assets: [</span><br><span class="line">    <span class="string">'./main.hash.js'</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;WebPack-构建PWA&quot;&gt;&lt;a href=&quot;#WebPack-构建PWA&quot; class=&quot;headerlink&quot; title=&quot;WebPack 构建PWA&quot;&gt;&lt;/a&gt;WebPack 构建PWA&lt;/h3&gt;&lt;p&gt;前面我们了解到如何通过 Service Worker 服务缓存资源, 如今WEB前端许多项目都使用了webpack构建工具, 今天我们不来将如何使用webpack, 仅仅简单介绍下 如何通过webpack 来构建一个 PWA 应用。&lt;/p&gt;
&lt;p&gt;在原有webpack 环境下，我们需要引入一个扩展包 &lt;a href=&quot;https://github.com/oliviertassinari/serviceworker-webpack-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;serviceworker-webpack-plugin&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -D serviceworker-webpack-plugin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://blog.goubaa.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="https://blog.goubaa.com/tags/JS/"/>
    
      <category term="webpack" scheme="https://blog.goubaa.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>traceroute网络分析</title>
    <link href="https://blog.goubaa.com/2018/03/22/traceroute%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/"/>
    <id>https://blog.goubaa.com/2018/03/22/traceroute网络分析/</id>
    <published>2018-03-22T07:34:36.000Z</published>
    <updated>2020-03-26T11:52:13.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="traceroute网络分析"><a href="#traceroute网络分析" class="headerlink" title="traceroute网络分析"></a>traceroute网络分析</h3><p>如今网络如初发达，4G 普及，5G 即将开启，但是我们经常还是会遇到网卡，网络延迟。当然造成网络卡的原因有很多，基本原因还是带宽不够。</p><p>当然很多人都会说，我们家可是50MB、100M带宽呢，还是卡啊。这就不得不说我们的网络传输过程了，网络就好比高速公路，高速上各种收费站、枢纽，在网络世界里体现为我们的路由器、交换机等。</p><p>当我们在家里访问百度的时候我们打开了 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 页面, 这个简单的动作，在网络的世界里面缺很复杂，看起来我们只是访问了百度的页面，但是，在网络的世界里面，我们可能走了几百公里出去了。下面，我们来一起看下我们到底在网络世界怎么个传输法的。</p><a id="more"></a><p>traceroute是一个工具，用来分析 数据从原地址到目标地址整个过程所经过的各种网关。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute www.baidu.com</span><br></pre></td></tr></table></figure></p><p>在 unix 系统的命令里面可以键入上面的命令，下面是 输出结果</p><p><img src="/uploads/20180329/1.png" alt="traceroute"></p><pre class="mermaid">graph TDA[你的个人电脑] -->B[公司网关或者学校网关]B -->C[区或者镇的电信公司的ISP 网络网关]C -->D[城市电信公司的ISP网络网关]D -->E[省或者直辖市的电信公司网关]E -->F[更高级别的电信ISP网络网关]</pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;traceroute网络分析&quot;&gt;&lt;a href=&quot;#traceroute网络分析&quot; class=&quot;headerlink&quot; title=&quot;traceroute网络分析&quot;&gt;&lt;/a&gt;traceroute网络分析&lt;/h3&gt;&lt;p&gt;如今网络如初发达，4G 普及，5G 即将开启，但是我们经常还是会遇到网卡，网络延迟。当然造成网络卡的原因有很多，基本原因还是带宽不够。&lt;/p&gt;
&lt;p&gt;当然很多人都会说，我们家可是50MB、100M带宽呢，还是卡啊。这就不得不说我们的网络传输过程了，网络就好比高速公路，高速上各种收费站、枢纽，在网络世界里体现为我们的路由器、交换机等。&lt;/p&gt;
&lt;p&gt;当我们在家里访问百度的时候我们打开了 &lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.baidu.com&lt;/a&gt; 页面, 这个简单的动作，在网络的世界里面缺很复杂，看起来我们只是访问了百度的页面，但是，在网络的世界里面，我们可能走了几百公里出去了。下面，我们来一起看下我们到底在网络世界怎么个传输法的。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="https://blog.goubaa.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="IP" scheme="https://blog.goubaa.com/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>iPhone拍照上传图片旋转</title>
    <link href="https://blog.goubaa.com/2018/03/21/iPhone%E6%8B%8D%E7%85%A7%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%AC/"/>
    <id>https://blog.goubaa.com/2018/03/21/iPhone拍照上传图片旋转/</id>
    <published>2018-03-21T02:32:57.000Z</published>
    <updated>2020-03-26T11:52:13.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p>经常遇到前端拍照上传照片这样的需求, 大多数人直接加下入下面的代码，就完事了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span> <span class="attr">accept</span>=<span class="string">'image/*'</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123; this.handleFileUpload(e) &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">handleFileUpload(e) &#123;</span><br><span class="line">  <span class="keyword">const</span> _files = e.target.files;</span><br><span class="line">  <span class="keyword">let</span> fd = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line">  _files.forEach(<span class="function"><span class="params">cell</span> =&gt;</span> &#123;</span><br><span class="line">    fd.append(<span class="string">'file'</span>, cell);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  uploadFile(fd).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>但是当你的测试同学细心点，你就会遇到来自iPhone 的BUG。<br>iPhone 拍出来的照片有点特殊，它的照片包含了<a href="https://zh.wikipedia.org/wiki/EXIF" target="_blank" rel="noopener">EXIF信息</a>, EXIF信息里面<strong>Orientation</strong>, 会影响照片的方向:</p><p><img src="/uploads/20180322/1.jpg" alt="Orientation"><br>一般情况下<strong>Orientation</strong> 的值会是1, 或者-1(Android)。但是IOS 会出现 6、3等情况。这些特殊的信息，会导致图片上传后旋转。</p><p><img src="/uploads/20180322/2.jpg" alt="transform"><br>那么如何解决这样的问题呢？</p><h3 id="解决IOS-orientation-的旋转问题"><a href="#解决IOS-orientation-的旋转问题" class="headerlink" title="解决IOS orientation 的旋转问题"></a>解决IOS orientation 的旋转问题</h3><h4 id="没错，直接抹除EXIF信息"><a href="#没错，直接抹除EXIF信息" class="headerlink" title="没错，直接抹除EXIF信息"></a>没错，直接抹除EXIF信息</h4><p>直接清除EXIF信息，可以快速的解决问题，这里我们需要引入较新的WEB API: <code>FileReader</code> 和 <code>DataView</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先，files 是上传的图片 </span></span><br><span class="line">cosnt files = e.target.files;</span><br><span class="line"><span class="keyword">let</span> fr = <span class="keyword">new</span> FileReader();</span><br><span class="line">fr.onload = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(<span class="keyword">this</span>.result);</span><br><span class="line">  <span class="keyword">let</span> offset = <span class="number">0</span>, recess = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> pieces = [];</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (dv.getUint16(offset) == <span class="number">0xffd8</span>) &#123;</span><br><span class="line">    offset += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> app1 = dv.getUint16(offset);</span><br><span class="line">    offset += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (offset &lt; dv.byteLength) &#123;</span><br><span class="line">      <span class="keyword">if</span> (app1 == <span class="number">0xffe1</span>) &#123;</span><br><span class="line">        pieces[i] = &#123; <span class="attr">recess</span>: recess, <span class="attr">offset</span>: offset - <span class="number">2</span> &#125;;</span><br><span class="line">        recess = offset + dv.getUint16(offset);</span><br><span class="line">        i++;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (app1 == <span class="number">0xffda</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      offset += dv.getUint16(offset);</span><br><span class="line">      <span class="keyword">let</span> app1 = dv.getUint16(offset);</span><br><span class="line">      offset += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pieces.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> newPieces = [];</span><br><span class="line">      pieces.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">        newPieces.push(<span class="keyword">this</span>.result.slice(v.recess, v.offset));</span><br><span class="line">      &#125;, <span class="keyword">this</span>);</span><br><span class="line">      newPieces.push(<span class="keyword">this</span>.result.slice(recess));</span><br><span class="line">      <span class="keyword">let</span> br = <span class="keyword">new</span> Blob(newPieces, &#123; <span class="attr">type</span>: <span class="string">'image/jpeg'</span> &#125;);</span><br><span class="line">      <span class="comment">// br 就是已经清除了EXIF 信息的新图片</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fr.readAsArrayBuffer(files[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></p><h4 id="如果你需要保留EXIF信息-当然也可以配合Canvas来处理"><a href="#如果你需要保留EXIF信息-当然也可以配合Canvas来处理" class="headerlink" title="如果你需要保留EXIF信息, 当然也可以配合Canvas来处理"></a>如果你需要保留EXIF信息, 当然也可以配合Canvas来处理</h4><p>同样的也需要引入较新的WEB API: <code>FileReader</code> 和 <code>DataView</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步 检查 orientation</span></span><br><span class="line">  checkOrientation(File file)</span><br><span class="line"><span class="comment">// 使用canvas </span></span><br><span class="line">ctxt.rotate(n * <span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br></pre></td></tr></table></figure><p>强烈建议清除 EXIF信息，简单粗暴.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;图片上传&quot;&gt;&lt;a href=&quot;#图片上传&quot; class=&quot;headerlink&quot; title=&quot;图片上传&quot;&gt;&lt;/a&gt;图片上传&lt;/h3&gt;&lt;p&gt;经常遇到前端拍照上传照片这样的需求, 大多数人直接加下入下面的代码，就完事了。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;multiple&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;accept&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;image/*&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onChange&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;(e)&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123; this.handleFileUpload(e) &amp;#125;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;handleFileUpload(e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; _files = e.target.files;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fd = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FormData();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _files.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;cell&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fd.append(&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;, cell);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uploadFile(fd).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;).catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="https://blog.goubaa.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="https://blog.goubaa.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JIT 编译器</title>
    <link href="https://blog.goubaa.com/2018/03/20/JIT%20%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <id>https://blog.goubaa.com/2018/03/20/JIT 编译器/</id>
    <published>2018-03-20T03:45:39.000Z</published>
    <updated>2020-03-26T11:52:13.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编译器简述"><a href="#编译器简述" class="headerlink" title="编译器简述"></a>编译器简述</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编译器简述&quot;&gt;&lt;a href=&quot;#编译器简述&quot; class=&quot;headerlink&quot; title=&quot;编译器简述&quot;&gt;&lt;/a&gt;编译器简述&lt;/h3&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://blog.goubaa.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="https://blog.goubaa.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>PWA应用 进阶一</title>
    <link href="https://blog.goubaa.com/2018/03/19/pwa%E5%BA%94%E7%94%A8%E8%BF%9B%E9%98%B6/"/>
    <id>https://blog.goubaa.com/2018/03/19/pwa应用进阶/</id>
    <published>2018-03-19T09:00:59.000Z</published>
    <updated>2020-03-26T11:52:13.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是PWA应用？"><a href="#什么是PWA应用？" class="headerlink" title="什么是PWA应用？"></a>什么是PWA应用？</h3><p>PWA 的全拼是 Progressive Web Apps, 意思就是渐进式的网页应用。现在的许多网页应用相比Native APP 都有以下许多缺点:</p><ol><li>断网下基本无法使用</li><li>需要输入网址才能访问</li><li>无法获取推送消息</li></ol><p>当然Native APP 相比普通网页也有许多缺点:</p><ol><li>开发成本远高于普通网页</li><li>需要安装软件</li><li>80%的Native APP 无人问津</li></ol><p>在这样的情况下 W3C和Google开始推出<strong>PWA</strong>技术, PWA应用就是为了提升Web APP 的用户体验，结合 Web APP 和 Native APP 的优点. </p><a id="more"></a><p>总的来说PWA App 有以下特点:</p><ol><li>安全的(基于HTTPS)</li><li>自适应的(必须响应式)</li><li>SEO优化的()</li><li>可持续的(在网络通畅的情况下，同步最新状态)</li><li>可安装的</li><li>极速体验的</li></ol><h3 id="Web-App-如何升级-PWA-APP"><a href="#Web-App-如何升级-PWA-APP" class="headerlink" title="Web App 如何升级 PWA APP"></a>Web App 如何升级 PWA APP</h3><p>那么如何从普通的网页升级到PWA 应用呢？需要如下几个必要的条件:</p><ol><li>第一网站必须使用https</li><li>所有页面都必须适配pad 和 mobile</li><li>必须添加 Manifest 包含 PWA APP 的应用信息, 以及必要的资源</li><li>支持<strong>Service Worker</strong> (important).</li></ol><h3 id="Manifest-详解"><a href="#Manifest-详解" class="headerlink" title="Manifest 详解"></a>Manifest 详解</h3><p>Manifest 是一个JSON文件, 配置了 PWA APP 应用的名称、启动图片、启动路径和主题颜色等, 具体如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"short_name"</span>: <span class="string">"H.T App"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Blog of Harry.Tang"</span>,</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"launcher-icon-1x.png"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"48x48"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"launcher-icon-2x.png"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"96x96"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"launcher-icon-4x.png"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"192x192"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"start_url"</span>: <span class="string">"index.html?utm_source=homescreen"</span>,</span><br><span class="line">  <span class="attr">"background_color"</span>: <span class="string">"#2196F3  // 指定背景颜色。 Chrome 在网页启动后会立即使用此颜色"</span>,</span><br><span class="line">  <span class="attr">"display"</span>: <span class="string">"standalone // 隐藏浏览器的 UI"</span>,</span><br><span class="line">  <span class="attr">"orientation"</span>: <span class="string">"landscape // 强制一个特定方向"</span>,</span><br><span class="line">  <span class="attr">"theme_color"</span>: <span class="string">"#2196F3 // 指定主题颜色。该属性设置工具栏的颜色"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Manifest 的引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"/manifest.json"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><h4 id="Service-Worker-1"><a href="#Service-Worker-1" class="headerlink" title="Service Worker"></a>Service Worker</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是PWA应用？&quot;&gt;&lt;a href=&quot;#什么是PWA应用？&quot; class=&quot;headerlink&quot; title=&quot;什么是PWA应用？&quot;&gt;&lt;/a&gt;什么是PWA应用？&lt;/h3&gt;&lt;p&gt;PWA 的全拼是 Progressive Web Apps, 意思就是渐进式的网页应用。现在的许多网页应用相比Native APP 都有以下许多缺点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;断网下基本无法使用&lt;/li&gt;
&lt;li&gt;需要输入网址才能访问&lt;/li&gt;
&lt;li&gt;无法获取推送消息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然Native APP 相比普通网页也有许多缺点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发成本远高于普通网页&lt;/li&gt;
&lt;li&gt;需要安装软件&lt;/li&gt;
&lt;li&gt;80%的Native APP 无人问津&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这样的情况下 W3C和Google开始推出&lt;strong&gt;PWA&lt;/strong&gt;技术, PWA应用就是为了提升Web APP 的用户体验，结合 Web APP 和 Native APP 的优点. &lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://blog.goubaa.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="https://blog.goubaa.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.goubaa.com/2018/03/15/hello-world/"/>
    <id>https://blog.goubaa.com/2018/03/15/hello-world/</id>
    <published>2018-03-15T03:37:02.000Z</published>
    <updated>2020-03-26T11:52:13.783Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.info(<span class="string">"tag"</span>, <span class="string">"Hello World!"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="java" scheme="https://blog.goubaa.com/categories/java/"/>
    
    
      <category term="java" scheme="https://blog.goubaa.com/tags/java/"/>
    
  </entry>
  
</feed>
